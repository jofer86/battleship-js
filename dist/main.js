!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<e.length;i++){var s=e[i];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(0)(!1)).i(n(3),""),t.push([e.i,'body{font-family:"Righteous", cursive}main{background-image:linear-gradient(to right, #4baea0, #278d7f)}main h1{height:140px;display:flex;justify-content:center;align-items:center;font-size:80px;color:antiquewhite}.in-wrapper{animation:hell 2s ease-in 0s}@keyframes hell{0%{opacity:0}50%{opacity:0.5}80%{opacity:0.75}100%{opacity:1}}.main-board{display:flex;justify-content:space-around;align-items:center;position:relative}.board .row{display:flex}.board .col{display:flex;justify-content:center;align-items:center;border:1px solid black;margin:0.5px;height:30px;width:30px;padding:10px;border-radius:4px;background-color:#fda77f;transition:0.8s}.board .col:hover{transform:scale(1.05);cursor:pointer;background-color:#fa7f46}.board__player .col{background-color:#f0decb}.board__player .col:hover{background-color:#f0decb;transform:scale(1);cursor:auto}.taken{background-color:#1a2c3a !important}.hit{background-color:#f0134d !important;animation:hit 1s ease-in-out 0s}@keyframes hit{50%{transform:scale(3);opacity:0.5}100%{transfor:scale(1);opacity:1}}.hit:hover{transform:none;cursor:auto;background-color:#ff6361}.miss{background-color:#3e64ff !important;animation:hit 1s ease-in-out 0s}@keyframes hit{0%{background-color:transparent}50%{transform:scale(3);background-color:transparent;opacity:0.5}80%{background-color:transparent}100%{transfor:scale(1);opacity:1}}.miss:hover{transform:none;cursor:auto;background-color:#d1afae}.status{display:flex;justify-content:space-around;align-items:center;height:20vh}.status .pl-status,.status .cp-status{border:6px solid #f2eee5;background-image:linear-gradient(to right, #979797, #c5bfbf);border-radius:50px;width:13rem;height:80px;display:flex;flex-direction:column;align-items:center;justify-content:space-around;color:#f2eee5;font-size:25px}.playerWin,.computerWin{animation:hello 2s ease-out 0s;margin-top:140px;height:40vh;background-image:linear-gradient(to right, #3413f0, #634ce7);display:flex;flex-direction:column;justify-content:center;align-items:center}@keyframes hello{0%{opacity:0}50%{opacity:0.5}80%{opacity:0.75}100%{opacity:1}}.playerWin h1,.computerWin h1{color:antiquewhite;font-size:65px}.playerWin button,.computerWin button{padding:30px;border-radius:10px;background-image:linear-gradient(to left, #4baea0, #278d7f);color:antiquewhite;font-size:25px;font-family:"Righteous", cursive;margin-top:40px}.computerWin{background-image:linear-gradient(to right, #f0134d, #90072b)}.active{background-image:linear-gradient(to right, #70416d, #995995) !important}.invalid{position:absolute;width:15%;top:-25%;left:41%;padding:20px;font-size:25px;border-radius:20px;border:5px solid antiquewhite;background-image:linear-gradient(to right, #f0134d, #90072b);display:flex;justify-content:center;align-items:center;color:antiquewhite}.hide{transform:scale(0)}\n',""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""])},function(e,t,n){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],t))}else{for(var s=[];i<r.parts.length;i++)s.push(b(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function l(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o&&e.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function b(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=l(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=l(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=s(e,t);return c(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a],l=o[i.id];l&&(l.refs--,r.push(l))}e&&c(s(e,t),t);for(var u=0;u<r.length;u++){var d=r[u];if(0===d.refs){for(var p=0;p<d.parts.length;p++)d.parts[p]();delete o[d.id]}}}}},function(e,t,n){"use strict";n.r(t);n(1);var r=(()=>{const e=document.querySelector(".pl-status"),t=document.querySelector(".cp-status"),n=document.querySelector(".board__computer"),r=document.querySelector(".board__player"),o=document.querySelector("#pl-hits"),a=document.querySelector("#cp-hits"),i=document.querySelector(".invalid"),s=document.querySelector(".in-wrapper");return{buildCompBoard:e=>{const t=e.board.map((e,t)=>{return`\n        <div class="row" > ${e.map((e,n)=>{let r,o="";switch(e.state){case"hit":r="x",o="hit";break;case"miss":r="||",o="miss";break;default:r=[t,n].join("")}return`\n        <div class="col bot ${o}" id="${[t,n].join("")}">${r}</div>\n        `}).join("")}</div>\n        `}).join("");n.innerHTML=t},buildPlayerBoard:e=>{const t=e.board.map((e,t)=>{return`\n        <div class= "row" > ${e.map((e,n)=>{let r;switch(e.state){case"taken":r="";break;default:r=[t,n].join("")}return`\n        <div class= "col ${e.state} " id = "P${[t,n].join("")}" > ${r}</div>\n        `}).join("")}</div>\n        `}).join("");r.innerHTML=t},comBoard:n,changeCell:(e,t)=>{let n="";switch(t.state){case"hit":n="hit";break;case"miss":n="miss"}e.classList.add(n),e.innerText=""},updateBanner:(n,r)=>{n?(o.innerText=`${r} sunked ships`,e.classList.remove("active"),t.classList.add("active")):(a.innerText=`${r} sunked ships`,e.classList.add("active"),t.classList.remove("active"))},wrapper:s,playerWin:'\n    <div class="playerWin">\n      <h1> Congratulations!! You are the Winner! </h1>\n      <button class="gameStart"> Play Again </button>\n    </div> \n  ',computerWin:'\n  <div class="computerWin">\n    <h1> Oh no!! The Computer Wins! </h1>\n    <button class="gameStart"> Play Again </button>\n  </div> \n',worngMoveInd:i}})();var o=e=>{const t=["0123456789","0123456789"],n=new Array(10);t[0].split("").forEach((e,r)=>{n[r]=[],t[1].split("").forEach(t=>{n[r].push({pos:`${e}${t}`,state:"empty"})})});const r=n,o=[],a=(e,t,n)=>{const o=parseInt(t.pos[1]),a=parseInt(t.pos[0]);if("horizontal"===n){for(let t=o;t<=o+e.length-1;t++)if(!r[a][t]||"empty"!==r[a][t].state)return!1}else for(let t=a;t<=a+e.length-1;t++)if(!r[t]||"empty"!==r[t][o].state)return!1;return!0};return{validPosition:a,board:r,placeShip:()=>{e.map(e=>{let t,[n,o]=[0,0];const i=["horizontal","vertical"];let s;do{n=Math.round(9*Math.random()),o=Math.round(9*Math.random()),t=r[o][n],s=Math.round(1*Math.random())}while(!a(e,t,i[s]));if("horizontal"===i[s])for(let t=n;t<n+e.length;t++)r[o][t].state="taken",e.position.push(r[o][t].pos);else if("vertical"===i[s])for(let t=o;t<o+e.length;t++)r[t][n].state="taken",e.position.push(r[t][n].pos);return e})},recieveAttack:(t,n)=>{const a=r[t][n].pos,i=e.filter(e=>e.position.includes(a))[0];i?(i.hit(a),r[t][n].state="hit",i.isSunk()&&o.push(i.type())):r[t][n].state="miss"},gameOver:()=>o.length>=e.length,sunkedShips:()=>o.length}};var a=e=>({length:e,type:()=>{switch(e){case 1:return"Submarine";case 2:return"Destroyer";case 3:return"Cruiser";case 4:return"Battelship";default:return!1}},position:[],healthPoints:e,hit(e){this.position.includes(e)&&(this.healthPoints-=this.isSunk()?0:1)},isSunk(){return 0===this.healthPoints}});var i=(e,t)=>{const n=t,r=e,o=[];return{getName:()=>r,getType:()=>n,getMoves:()=>o,play:e=>{if("bot"===n){let e,t;do{e=Math.round(9*Math.random()),t=Math.round(9*Math.random())}while(o.includes([t,e].join("")));return o.push([t,e].join("")),[t,e]}const[t,r]=e.pos.split("").map(e=>parseInt(e));return!o.includes([t,r].join(""))&&(o.push([t,r].join("")),[t,r])}}};let s=null,c=null;const l=i("Computer","bot"),u=i("Clarence","Human"),d=[a(5),a(4),a(3),a(2),a(1)],p=[a(5),a(4),a(3),a(2),a(1)];let f,h,m;const b=()=>{window.location.reload(!1)};(s=o(p)).placeShip(),r.buildCompBoard(s),(c=o(d)).placeShip(),r.buildPlayerBoard(c),f=!0,h=0,m=0,r.updateBanner(!0,0),r.updateBanner(!1,0);const g=()=>{if(!f){const e=l.play(),[t,n]=e;e.unshift("P");const o=document.getElementById(e.join(""));c.recieveAttack(t,n),m=c.sunkedShips(),r.updateBanner(f,m),r.changeCell(o,c.board[t][n]),setTimeout(()=>{f=!f},1e3),c.gameOver()&&(r.wrapper.innerHTML=r.computerWin,document.querySelector(".gameStart").addEventListener("click",b))}};window.onclick=e=>{let t=0,n=1;if(f){if(!e.target.classList.value.includes("bot"))return;if(t=parseInt(e.target.id.split("")[0]),n=parseInt(e.target.id.split("")[1]),u.play(s.board[t][n])){if(s.recieveAttack(t,n),r.changeCell(e.target,s.board[t][n]),h=s.sunkedShips(),r.updateBanner(f,h),r.worngMoveInd.classList.value="invalid hide",f=!f,s.gameOver())return r.wrapper.innerHTML=r.playerWin,void document.querySelector(".gameStart").addEventListener("click",b);setTimeout(g,1500)}else r.worngMoveInd.classList.remove("hide")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,