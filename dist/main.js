!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")}));return[n].concat(a).concat([o]).join("\n")}var i,s,l;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<t.length;i++){var s=t[i];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),e.push(s))}},e}},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=t.exports=n(0)(!1)).i(n(3),""),e.push([t.i,"main{position:relative}.main-board{display:flex;height:100vh;justify-content:space-around;align-items:center}.board .row{display:flex}.board .col{display:flex;justify-content:center;align-items:center;border:1px solid black;margin:.5px;height:20px;width:20px;padding:10px;border-radius:4px;background-color:#fda77f;transition:.8s}.board .col:hover{transform:scale(1.05);cursor:pointer;background-color:#fa7f46}.board__player .col{background-color:#f0decb}.board__player .col:hover{background-color:#f0decb;transform:scale(1);cursor:auto}.taken{background-color:#1a3e59 !important}.hit{background-color:#f0134d !important;animation:hit 1s ease-in-out 0s}@keyframes hit{50%{transform:scale(3);opacity:.5}100%{transfor:scale(1);opacity:1}}.hit:hover{transform:none;cursor:auto;background-color:#ff6361}.miss{background-color:#3e64ff !important;animation:hit 1s ease-in-out 0s}@keyframes hit{50%{transform:scale(3);opacity:.5}100%{transfor:scale(1);opacity:1}}.miss:hover{transform:none;cursor:auto;background-color:#d1afae}.status{border:1px solid;width:40%;position:absolute;top:5%;left:30%;height:3rem;display:flex;justify-content:space-around}.status .pl-status{border:1px solid;width:7rem}\n",""])},function(t,e,n){(t.exports=n(0)(!1)).push([t.i,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}",""])},function(t,e,n){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function s(t,e){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],i=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function l(t,e){for(var n=0;n<t.length;n++){var r=t[n],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],e))}else{for(var s=[];i<r.parts.length;i++)s.push(b(r.parts[i],e));o[r.id]={id:r.id,refs:1,parts:s}}}}function c(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var r=n.nc;r&&(t.attributes.nonce=r)}if(Object.keys(t.attributes).forEach((function(n){e.setAttribute(n,t.attributes[n])})),"function"==typeof t.insert)t.insert(e);else{var o=i(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var u,d=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=d(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}function f(t,e,n){var r=n.css,o=n.media,a=n.sourceMap;if(o&&t.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,m=0;function b(t,e){var n,r,o;if(e.singleton){var a=m++;n=h||(h=c(e)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=c(e),r=f.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a());var n=s(t,e);return l(n,e),function(t){for(var r=[],a=0;a<n.length;a++){var i=n[a],c=o[i.id];c&&(c.refs--,r.push(c))}t&&l(s(t,e),e);for(var u=0;u<r.length;u++){var d=r[u];if(0===d.refs){for(var p=0;p<d.parts.length;p++)d.parts[p]();delete o[d.id]}}}}},function(t,e,n){"use strict";n.r(e);n(1);var r=(()=>{document.querySelector(".status");const t=document.querySelector(".board__computer"),e=document.querySelector(".board__player");return{buildCompBoard:e=>{const n=e.board.map((t,e)=>{return`\n        <div class="row" > ${t.map((t,n)=>{let r,o="";switch(t.state){case"hit":r="X",o="hit";break;case"miss":r="||",o="miss";break;default:r=[e,n].join("")}return`\n        <div class="col bot ${o}" id="${[e,n].join("")}">${r}</div>\n        `}).join("")}</div>\n        `}).join("");t.innerHTML=n},buildPlayerBoard:t=>{const n=t.board.map((t,e)=>{return`\n        <div class= "row" > ${t.map((t,n)=>{let r;switch(t.state){case"taken":r="#";break;default:r=[e,n].join("")}return`\n        <div class= "col ${t.state}" id = "P${[e,n].join("")}" > ${r}</div>\n        `}).join("")}</div>\n        `}).join("");e.innerHTML=n},comBoard:t,changeCell:(t,e)=>{let n,r="";switch(e.state){case"hit":n="X",r="hit";break;case"miss":n="||",r="miss";break;default:n=t.innerHtml}t.classList.add(r),t.innerText=n}}})();var o=t=>{const e=["0123456789","0123456789"],n=new Array(10);e[0].split("").forEach((t,r)=>{n[r]=[],e[1].split("").forEach(e=>{n[r].push({pos:`${t}${e}`,state:"empty"})})});const r=n,o=[],a=(t,e,n)=>{const o=parseInt(e.pos[1]),a=parseInt(e.pos[0]);if("horizontal"===n){for(let e=o;e<=o+t.length-1;e++)if(!r[a][e]||"empty"!==r[a][e].state)return!1}else for(let e=a;e<=a+t.length-1;e++)if(!r[e]||"empty"!==r[e][o].state)return!1;return!0};return{validPosition:a,board:r,placeShip:()=>{t.map(t=>{let[e,n]=[0,0],o="";const i=["horizontal","vertical"];let s=0;do{e=Math.round(9*Math.random()),n=Math.round(9*Math.random()),o=r[n][e],s=Math.round(1*Math.random())}while(!a(t,o,i[s]));if("horizontal"===i[s])for(let o=e;o<=e+t.length-1;o++)r[n][o].state="taken",t.position.push(r[n][o].pos);if("vertical"===i[s])for(let o=n;o<=n+t.length-1;o++)r[o][e].state="taken",t.position.push(r[o][e].pos);return t})},recieveAttack:(e,n)=>{const a=r[e][n].pos,i=t.filter(t=>t.position.includes(a))[0];i?(i.hit(a),r[e][n].state="hit",i.isSunk()&&o.push(i.type())):r[e][n].state="miss"},gameOver:()=>o.length===t.length}};var a=t=>({length:t,type:()=>{switch(t){case 1:return"Submarine";case 2:return"Destroyer";case 3:return"Cruiser";case 4:return"Battelship";default:return!1}},position:[],healthPoints:t,hit(t){this.position.includes(t)&&(this.healthPoints-=this.isSunk()?0:1)},isSunk(){return 0===this.healthPoints}});var i=(t,e)=>{const n=e,r=t;let o=[];return{getName:()=>r,getType:()=>n,getMoves:()=>o,initMoves:t=>{o=[]},play:t=>{if("bot"===n){let t,e;do{t=Math.round(9*Math.random()),e=Math.round(9*Math.random())}while(o.includes([e,t].join("")));return o.push([e,t].join("")),[e,t]}const[e,r]=t.pos.split("").map(t=>parseInt(t));return!o.includes([e,r].join(""))&&(o.push([e,r].join("")),[e,r])}}};let s=null,l=null;const c=i("Computer","bot"),u=i("Clarence","Human");let d;const p=()=>{c.initMoves(),u.initMoves(),(s=o([a(1)])).placeShip(),r.buildCompBoard(s),(l=o([a(1)])).placeShip(),r.buildPlayerBoard(l),d=!0};p();const f=()=>{if(!d){const t=c.play(),[e,n]=t;t.unshift("P");const o=document.getElementById(t.join(""));l.recieveAttack(e,n),r.changeCell(o,l.board[e][n]),setTimeout(()=>{d=!d},1e3),l.gameOver()&&(alert("Computer Won the Game"),p())}};window.onclick=t=>{let e=0,n=1;if(d){if(!t.target.classList.value.includes("bot"))return;if(e=parseInt(t.target.id.split("")[0]),n=parseInt(t.target.id.split("")[1]),u.play(s.board[e][n])){if(s.recieveAttack(e,n),r.changeCell(t.target,s.board[e][n]),d=!d,s.gameOver())return alert("player won the game"),void p();setTimeout(f,2e3)}else alert("wrong move")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,